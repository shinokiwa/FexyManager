// Generated by CoffeeScript 1.3.3
var Folders, async, configs, createFolderByUpstreamDirs, createFolderByUpstreamFiles, finish, fs, log, path, registFoldersByUpstreamDirs, removeLogicalFolder, removeLogicalFolders, searchFoldersByUpstreamDirs, start, updateLogicalFolders, __;

require('./models').init();

Folders = require('./models/folders');

__ = require('./i18n');

configs = require('./models/configs');

fs = require('fs');

path = require('path');

log = require('./log');

async = require('async');

start = function() {
  log("[explore]" + (__('Start Process Explore.')));
  return updateLogicalFolders();
};

updateLogicalFolders = function() {
  log("[explore]Updating logical folders from physical folders.");
  return Folders.physicalFolders(function(folderPath, next) {
    var folder;
    folder = Folders.newFolder(folderPath);
    folder.save();
    return typeof next === "function" ? next() : void 0;
  }, removeLogicalFolders());
};

removeLogicalFolders = function() {
  log("[explore]Removing logical folders have not physical folder.");
  return Folders.find({}, function(e, data) {
    var folder, tasks, _i, _len;
    tasks = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      folder = data[_i];
      tasks.push(removeLogicalFolder(folder));
    }
    return async.parallel(tasks, function(err, results) {
      return createFolderByUpstreamDirs();
    });
  });
};

removeLogicalFolder = function(folder) {
  return function(next) {
    if (!folder.src.exists()) {
      log("[explore]Remove logical folder : " + folder._id + " " + folder.path);
      return folder.remove(next);
    } else {
      if (folder.src.count() > 0) {
        return typeof next === "function" ? next() : void 0;
      } else {
        return folder.remove(next);
      }
    }
  };
};

createFolderByUpstreamDirs = function() {
  var streamList, streamPath;
  log("[explore]Creating folders by upstream directories.");
  streamList = new Array;
  streamPath = configs.folders.upstream;
  searchFoldersByUpstreamDirs(streamList, streamPath);
  return registFoldersByUpstreamDirs(streamList, 0, createFolderByUpstreamFiles);
};

searchFoldersByUpstreamDirs = function(streamList, dirPath) {
  var childDir, childDirPath, dirList, _i, _len, _results;
  log("[explore]Search folders by upstream dir. : " + dirPath);
  dirList = fs.readdirSync(dirPath);
  _results = [];
  for (_i = 0, _len = dirList.length; _i < _len; _i++) {
    childDir = dirList[_i];
    childDirPath = path.join(dirPath, childDir);
    if (fs.statSync(childDirPath).isDirectory()) {
      searchFoldersByUpstreamDirs(streamList, childDirPath);
      _results.push(streamList.push(childDirPath));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

registFoldersByUpstreamDirs = function(streamList, i, next) {
  var folder;
  if (streamList[i] != null) {
    log("[explore]Regist folders by upstream dir. : " + streamList[i]);
    folder = Folders.newFolder(streamList[i]);
    return folder.save(function() {
      return registFoldersByUpstreamDirs(streamList, ++i, next);
    });
  } else {
    return typeof next === "function" ? next() : void 0;
  }
};

createFolderByUpstreamFiles = function() {
  var cnt, file, fileList, filePath, folder, streamPath, _i, _len, _results;
  log("[explore]Creating folders by upstream files.");
  streamPath = configs.folders.upstream;
  fileList = fs.readdirSync(streamPath);
  cnt = 0;
  if (fileList.length > 0) {
    _results = [];
    for (_i = 0, _len = fileList.length; _i < _len; _i++) {
      file = fileList[_i];
      filePath = path.join(streamPath, file);
      if (fs.statSync(filePath).isFile()) {
        folder = Folders.newFolder(filePath);
        log("[explore]Regist folders by upstream dir. : " + filePath + " : " + folder.path);
        _results.push(folder.save(function() {
          cnt++;
          if (cnt >= fileList.length) {
            return finish();
          }
        }));
      } else {
        cnt++;
        if (cnt >= fileList.length) {
          _results.push(finish());
        } else {
          _results.push(void 0);
        }
      }
    }
    return _results;
  } else {
    return finish();
  }
};

finish = function() {
  return Folders.remove({
    files: {
      $size: 0
    }
  }, function(e, data) {
    log("[explore]" + (__('All Process Completed.')));
    return process.exit();
  });
};

start();
