// Generated by CoffeeScript 1.3.3
var async, fs, log, models, path, prs;

fs = require('fs');

path = require('path');

async = require('async');

models = require('./index');

log = function (){};

module.exports = function(name) {
  var b, blockName, fullPath, streamPath;
  fullPath = path.join(models.fexyroot.path, name);
  if (fs.existsSync(b.path)) {
    if ((fs.statSync(b.path).isFile()) || ((name.length > 1) && (name !== "[dot]"))) {
      streamPath = path.join(models.configs.folders.upstream, name);
      log("[Folders.physicalFolders]Moving file on fexy : " + fullPath + " : " + streamPath);
      fs.renameSync(fullPath, streamPath);
      return false;
    }
  }
  if (name === "[dot]") {
    blockName = ".";
  }
  blockName = name.substring(0, 1);
  if (blockName === ".") {
    name = "[dot]";
  }
  b = {};
  b.path = path.join(models.fexyroot.path, blockName);
  b.exists = function() {
    return fs.existsSync(b.path);
  };
  b.count = function() {
    if (b.exists()) {
      return fs.readdirSync(b.path).length;
    } else {
      return 0;
    }
  };
  if (b.count() < 1) {
    fs.unlinkSync(b.path);
  }
  b.make = function() {
    var oldMask;
    if (!b.exists()) {
      oldMask = process.umask(0);
      fs.mkdirSync(b.path);
      fs.chmodSync(b.path, 0x1ff);
      return process.umask(oldMask);
    }
  };
  b.folders = function(fn, next) {
    var tasks;
    if (b.exists()) {
      tasks = [];
      return fs.readdir(b.path, function(err, folders) {
        var folder, _i, _len;
        for (_i = 0, _len = folders.length; _i < _len; _i++) {
          folder = folders[_i];
          tasks.push(prs(folder, fn));
        }
        return async.parallel(tasks, function(err, results) {
          return typeof next === "function" ? next(null, results) : void 0;
        });
      });
    }
  };
  return b;
};

prs = function(name, fn) {
  return function(next) {
    var folder;
    folder = models.folders(name);
    if (folder) {
      return fn(folder, next);
    } else {
      return typeof next === "function" ? next() : void 0;
    }
  };
};
